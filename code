//https://leetcode.com/problems/longest-palindromic-subsequence/
class Solution {
public:
     int dp[1002][1002];
    int longestCommonSubsequence(string text1, string text2) {
        int n =text1.length();
        int m = text2.length();
        memset(dp,-1,sizeof(dp));
        return dpsol(text1,text2,n,m);
    }
    int dpsol(string &s1,string &s2,int n,int m){
        if(n==0 || m==0){
            return 0;
        }
        if(dp[n][m]!=-1){
            return dp[n][m];
        }
        if(s1[n-1] == s2[m-1]){
            return dp[n][m] = 1+ dpsol(s1,s2,n-1,m-1);
        }
        
        return dp[n][m] = max(dpsol(s1,s2,n,m-1),dpsol(s1,s2,n-1,m));
        
    }
    int longestPalindromeSubseq(string s) {
        string s2 =s;
        reverse(s2.begin(),s2.end());
        return longestCommonSubsequence(s,s2);
    }
};
